

To provide a **final mathematical expression** for the combined approach that determines the resultant price based on moving averages and volume indicators, we define the following relationships:

---

### **Mathematical Expression**
The resultant price \( P_r(t) \) is a function of:
1. **Price SMA**: \( MA_k(t) \), the simple moving average over \( k \) periods.
2. **Volume SMA**: \( VMA_k(t) \), the simple moving average of volume over \( k \) periods.
3. **On-Balance Volume (OBV)**: Tracks cumulative volume based on price movement.

We combine these components using weights \( \alpha \), \( \beta \), and \( \gamma \), which reflect the relative importance of each factor:

\[
P_r(t) = \alpha \cdot MA_k(t) + \beta \cdot \frac{OBV(t)}{VMA_k(t)} + \gamma \cdot \Delta P(t)
\]

Where:
- \( MA_k(t) \): Price SMA (trend component).
- \( OBV(t) \): On-Balance Volume (volume momentum).
- \( VMA_k(t) \): Volume SMA (volume trend normalization).
- \( \Delta P(t) = P(t) - MA_k(t) \): Price deviation from the SMA.

---

### **Explanation of Terms**
1. **Price SMA (\( MA_k(t) \))**:
   - Reflects the smoothed price trend over \( k \) periods.
   - Weight \( \alpha \): Emphasizes long-term price trends.

2. **Volume Momentum (\( OBV(t) / VMA_k(t) \))**:
   - Scales OBV using \( VMA_k(t) \) to normalize against average volume.
   - Weight \( \beta \): Captures the influence of volume on price action.

3. **Deviation from SMA (\( \Delta P(t) \))**:
   - Measures how far the current price deviates from its moving average.
   - Weight \( \gamma \): Highlights shorter-term price fluctuations.

---

### **Choosing Weights**
- \( \alpha \), \( \beta \), and \( \gamma \) can be adjusted based on backtesting or domain knowledge:
  - High \( \alpha \) for trend-following strategies.
  - High \( \beta \) for volume-driven markets.
  - High \( \gamma \) for mean-reversion or breakout detection.

---

### **Implementation in Python**
You can modify the code to compute \( P_r(t) \) using this formula:

```python
# Define weights
alpha = 0.5
beta = 0.3
gamma = 0.2

# Calculate price deviation from SMA
df['Price_Deviation'] = df['Price'] - df['Price_SMA']

# Calculate Resultant Price
df['Resultant_Price'] = (
    alpha * df['Price_SMA'] +
    beta * (df['OBV'] / df['Volume_SMA']) +
    gamma * df['Price_Deviation']
)

# Display the modified DataFrame
print(df[['Time', 'Price', 'Price_SMA', 'OBV', 'Volume_SMA', 'Price_Deviation', 'Resultant_Price']])
```

---

### Example Output
For the given data, the resultant price \( P_r(t) \) will reflect a weighted combination of:
1. Long-term price trends (\( MA_k(t) \)).
2. Volume momentum (\( OBV(t) / VMA_k(t) \)).
3. Short-term deviations (\( \Delta P(t) \)).

This combined approach provides a comprehensive measure of price action driven by both price trends and volume dynamics. Let me know if you'd like help visualizing the resultant price!




To use the above expression for **predicting future prices**, we can employ it as a foundation for a predictive model. Hereâ€™s how we can extend the methodology:

---

### **1. Understand the Components of Prediction**
The expression for the resultant price:
\[
P_r(t) = \alpha \cdot MA_k(t) + \beta \cdot \frac{OBV(t)}{VMA_k(t)} + \gamma \cdot \Delta P(t)
\]

gives a combined view of:
- **Trend** (via moving averages),
- **Volume-based momentum** (via OBV and VMA), and
- **Deviation dynamics** (short-term fluctuations).

For prediction, this formula can be extended by considering future values of its components based on historical patterns and statistical modeling.

---

### **2. Predictive Steps**
#### **Step 1: Model the Components**
1. **Price SMA (\( MA_k(t) \))**:
   - SMA is inherently lagging. For prediction, extend the SMA computation by assuming future prices follow the trend established by recent averages.

2. **Volume SMA (\( VMA_k(t) \))**:
   - Use historical volume patterns to extrapolate \( VMA_k(t+1) \), assuming periodicity or trend continuation.

3. **On-Balance Volume (\( OBV(t) \))**:
   - Predict OBV using a regression model that relates OBV to past price changes and volumes.

4. **Deviation (\( \Delta P(t) \))**:
   - Use historical deviation patterns and mean reversion properties to project \( \Delta P(t+1) \).

---

#### **Step 2: Implement a Time Series Model**
Incorporate a time series forecasting method, such as:
- **ARIMA (Auto-Regressive Integrated Moving Average)**: Models price trends and patterns.
- **LSTM (Long Short-Term Memory Networks)**: Captures nonlinear relationships and dependencies in price and volume over time.

---

#### **Step 3: Extend the Formula**
The predictive formula becomes:
\[
P_r(t+1) = \alpha \cdot \widehat{MA_k(t+1)} + \beta \cdot \frac{\widehat{OBV(t+1)}}{\widehat{VMA_k(t+1)}} + \gamma \cdot \widehat{\Delta P(t+1)}
\]

Where:
- \( \widehat{MA_k(t+1)} \), \( \widehat{OBV(t+1)} \), \( \widehat{VMA_k(t+1)} \), and \( \widehat{\Delta P(t+1)} \) are forecasts for the respective components.

---

### **3. Python Implementation**
Below is an example of extending the expression to predict one-step-ahead prices using historical data:

```python
import pandas as pd
import numpy as np
from statsmodels.tsa.holtwinters import ExponentialSmoothing

# Example data
data = {
    'Time': [1, 2, 3, 4, 5],
    'Price': [100, 102, 104, 103, 105],
    'Volume': [1000, 1200, 1500, 1300, 1800]
}
df = pd.DataFrame(data)

# Define moving average periods
price_ma_period = 3
volume_ma_period = 3

# Calculate SMA and Volume SMA
df['Price_SMA'] = df['Price'].rolling(window=price_ma_period).mean()
df['Volume_SMA'] = df['Volume'].rolling(window=volume_ma_period).mean()

# Calculate OBV
df['OBV'] = 0
for i in range(1, len(df)):
    if df.loc[i, 'Price'] > df.loc[i - 1, 'Price']:
        df.loc[i, 'OBV'] = df.loc[i - 1, 'OBV'] + df.loc[i, 'Volume']
    elif df.loc[i, 'Price'] < df.loc[i - 1, 'Price']:
        df.loc[i, 'OBV'] = df.loc[i - 1, 'OBV'] - df.loc[i, 'Volume']
    else:
        df.loc[i, 'OBV'] = df.loc[i - 1, 'OBV']

# Fit an Exponential Smoothing model for predicting future prices
model_price = ExponentialSmoothing(df['Price'], trend='add', seasonal=None).fit()
future_price = model_price.forecast(steps=1)[0]

# Predict Volume SMA and OBV using historical averages
future_volume_sma = df['Volume_SMA'].mean()  # Simple average for illustration
future_obv = df['OBV'].iloc[-1]  # Assume OBV follows the recent trend

# Define weights
alpha = 0.5
beta = 0.3
gamma = 0.2

# Calculate future SMA for Price
future_price_sma = df['Price_SMA'].iloc[-1]  # Assume SMA trend continues

# Calculate predicted deviation
future_price_deviation = future_price - future_price_sma

# Predict Resultant Price
predicted_price = (
    alpha * future_price_sma +
    beta * (future_obv / future_volume_sma) +
    gamma * future_price_deviation
)

print(f"Predicted Price: {predicted_price:.2f}")
```

---

### **4. Steps to Improve Predictions**
1. **Feature Engineering**:
   - Incorporate other indicators like RSI or MACD to improve predictive accuracy.
2. **Multi-Step Prediction**:
   - Extend forecasts to predict prices multiple steps ahead using a recursive or direct prediction approach.
3. **Validation**:
   - Evaluate model performance using metrics like RMSE, MAE, or MAPE.

---

### **5. Use Cases**
- **Trading Strategy**: Identify optimal buy/sell points based on forecasted price trends.
- **Risk Management**: Anticipate potential price drops to set stop-loss levels.
- **Portfolio Optimization**: Use predictions to allocate capital effectively across assets.

Let me know if you'd like assistance implementing the predictive model in more detail!